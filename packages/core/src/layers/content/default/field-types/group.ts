import {SapphireFieldType} from '../../fields-typing';
import {AbstractReference} from './abstract-reference';
import {ValidationResult} from '../../../../common';

@SapphireFieldType({
  name: 'group',
  castTo: 'string',
  paramDefs: [
    {
      name: 'store',
      description: 'Generated by the management layer',
      type: 'string',
      required: false,
    }
  ] as const,
})
export class Group extends AbstractReference {
  constructor(params: { store: string; }) {
    super(params);
  }

  public validate(value: string): ValidationResult {
    const referenceValidationRes = super.validate(value);
    if (!referenceValidationRes.isValid) {
      return referenceValidationRes;
    }

    const raw = value.trim();
    const parts = raw.split(':');

    const pathTokens = parts[1].split('/');
    if (pathTokens.length > 1) {
      return ValidationResult.invalid(`Deep path ${parts[1]} is not authorized in group reference`);
    }

    return ValidationResult.valid();
  }
}
