import {customAlphabet} from 'nanoid';
import {ValidationResult, Validator} from './validation';

const idPattern = /^(?![-_\d])[a-z\d]+([-_][a-z\d]+)*$/;

const alphabet = 'abcdefghijklmnopqrstuvwxyz0123456789-_';
const nanoid = customAlphabet(alphabet, 10);

/**
 * Validation rules of IDs:
 * - Only use a-z, 0-9, and - or _
 * - No spaces
 * - No uppercase
 * - No leading digits
 * - Length limit: 64 characters
 * - No special characters
 */
export const idValidator: Validator<string> = (value: string) => {
  if (value.length === 0) {
    return ValidationResult.invalid('Id shouldn\'t be empty');
  } else if (value.length > 64) {
    return ValidationResult.invalid('Id shouldn\'t exceed 64 characters');
  }

  if (idPattern.test(value)) {
    return ValidationResult.valid();
  } else {
    return ValidationResult.invalid(
        `Id do not respect any of following the rules:
          - Only use a-z, 0-9, and - or _
          - No spaces
          - No uppercase
          - No leading digits
          - No special characters
          - No trailing hyphens/underscores`
    );
  }
};

export function generateId(prefix: string) {
  return `${prefix}${nanoid()}i`;  // add suffix 'i' to avoid trailing hyphen/underscore generated by nanoid
}
